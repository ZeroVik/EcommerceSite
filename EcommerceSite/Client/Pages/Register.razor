@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Регистрация</PageTitle>

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Имейл</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"/>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
     <div class="mb-3">
        <label for="password">Парола</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"/>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
     <div class="mb-3">
        <label for="confirmPassword">Потвърждаване на паролата</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password"/>
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Регистрация</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>


@code {
    string message = string.Empty;
    string messageCssClass = string.Empty;
    UserRegister user = new UserRegister();
    async void HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;
        if(result.Success)
        {
            messageCssClass = "text-success";
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            messageCssClass = "text-danger";
        }
        StateHasChanged();
    }
}
